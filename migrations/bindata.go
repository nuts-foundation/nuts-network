// Code generated for package migrations by go-bindata DO NOT EDIT. (@generated)
// sources:
// 1_create_table_document.down.sql
// 1_create_table_document.up.sql
// 2_delete_documents_timestamp_zero.up.sql
// 3_add_documents_content_hash.up.sql
// bindata.go
package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __1_create_table_documentDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x09\xf2\x74\x77\x77\x0d\x52\x28\x2d\x48\x49\x2c\x49\x8d\x2f\x2e\x49\x2c\x29\x8e\x4f\xce\xcf\x2b\x49\xcd\x2b\x29\x8e\x2f\xce\xac\x4a\xb5\xe6\x82\x28\x74\x74\xf2\x71\x55\x00\xcb\x43\x45\x3c\xfd\x5c\x5c\x23\x14\x3c\xdd\x14\x5c\x23\x3c\x83\x43\x82\x15\x32\x53\x2a\x40\x3a\x8b\x33\x8b\x4b\x52\xf3\x92\x2b\xe3\x33\x12\x8b\x33\xf0\x28\x2d\xc9\xcc\x4d\x2d\x2e\x49\xcc\x2d\x40\x56\x08\xb1\x25\x25\x3f\xb9\x34\x37\x35\xaf\xc4\x1a\x10\x00\x00\xff\xff\xf3\xed\x99\xe6\xa3\x00\x00\x00")

func _1_create_table_documentDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_create_table_documentDownSql,
		"1_create_table_document.down.sql",
	)
}

func _1_create_table_documentDownSql() (*asset, error) {
	bytes, err := _1_create_table_documentDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_create_table_document.down.sql", size: 163, mode: os.FileMode(420), modTime: time.Unix(1598295069, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1_create_table_documentUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\x41\x6f\x9b\x30\x1c\xc5\xef\xfe\x14\x6f\xa7\x82\xd6\x4c\x99\xb4\xd3\x50\x0f\x90\xb8\xc4\x1a\x33\x95\x71\xda\xf5\x84\x50\xb0\x06\x5a\x62\xa3\xda\x6c\xcd\x3e\xfd\x64\x02\x49\x49\x97\x43\x24\xec\x9f\xdf\xff\xff\xde\x5b\x09\x1a\x4b\x0a\x19\x27\x19\x45\x6d\x76\xfd\x41\x69\x47\x02\x02\x00\x4d\x65\x1b\xbc\xfd\xad\x36\xb1\x08\xbe\x2c\x43\x3c\x08\xf6\x3d\x16\xcf\xf8\x46\x9f\x6f\x07\x74\x67\xb4\x6d\xad\x53\x7a\x77\x2c\x87\x67\x13\x7a\xba\x76\xc7\x4e\xcd\x94\x1e\x63\x31\x10\x9f\x97\xcb\x10\x3c\x97\xe0\xdb\x2c\x1b\xd9\xf6\xa0\xac\xab\x0e\xdd\xc4\x26\x2c\x65\x5c\x8e\x1f\x73\x76\x67\xb4\x53\xda\xd9\xb3\x6e\x92\xe5\x09\x09\x23\x42\x16\x0b\x3c\x29\x58\xf3\xe2\x60\xf4\x45\xf3\xf6\x64\xca\x1a\xb4\x1a\xae\x51\xe6\xe5\x88\x4a\xa3\xd5\xb5\x7a\x85\x6d\x4c\xbf\xaf\x61\x3b\xa5\x6a\xf4\x1d\x5c\xd3\xea\x9f\xd6\x4b\xc9\x7c\x9d\x7f\x85\x54\xd6\xf9\x43\xfb\x81\x8c\xb1\x31\xbe\xa6\x3f\xd0\xd6\xaf\xe5\x79\xc2\xc9\x7e\xce\xcf\x61\x22\xb8\x9a\x1e\x46\xef\x9f\xbf\xcb\x6f\x26\x70\x7d\xeb\x0d\xce\x8a\xb3\xae\x72\x76\x6c\xed\x97\x3a\x9e\xe3\xfd\x6f\x57\xbf\xab\x7d\xaf\x66\x0d\x90\xcb\x4a\x52\xb0\x34\xa5\x02\x7d\x57\x57\x4e\x95\x83\x70\x39\xc5\x5c\xda\xf6\xaf\xc2\xf6\x61\xed\xc9\xfc\xfe\x12\xff\x9b\x6d\x49\x42\x53\xc6\x87\x41\x23\x38\x68\xa0\xa0\x72\x9c\x7c\x87\x55\x5c\xc8\x20\x18\xfe\x4f\x47\x71\x01\xc6\x25\x4d\xa9\x08\xf1\x11\xec\xde\x37\x1c\x64\x94\xa7\x72\x13\x68\xf5\xe7\xd3\x34\x28\xbc\xc5\x32\xc4\xe2\x8a\x30\xfb\x7a\x4e\x84\x5e\x70\x34\x18\xe2\x69\x43\x05\x1d\x62\xb9\xc3\xcd\xc4\x2d\xbc\x95\x9b\x88\x50\xbe\x8e\x08\xe3\x05\x15\xd2\xaf\x90\x8f\xdb\x3e\xc6\xd9\x96\x16\x08\xae\x78\x2f\x1e\xfd\x0b\x00\x00\xff\xff\x39\xbf\x75\x3f\x33\x03\x00\x00")

func _1_create_table_documentUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_create_table_documentUpSql,
		"1_create_table_document.up.sql",
	)
}

func _1_create_table_documentUpSql() (*asset, error) {
	bytes, err := _1_create_table_documentUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_create_table_document.up.sql", size: 819, mode: os.FileMode(420), modTime: time.Unix(1598295069, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __2_delete_documents_timestamp_zeroUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcc\x41\x0a\x82\x40\x14\x06\xe0\x7d\xa7\xf8\x2f\x60\x60\x3a\x6a\x44\x9b\x68\x32\xc1\x8a\xcc\x68\x3d\xe8\x2b\x06\x9c\xf7\xc2\x19\x23\x3a\x7d\xd0\xba\x03\x7c\x5f\x14\xe1\xca\xf6\x0d\x36\x2c\x9e\x3a\xe1\xde\xe3\x65\x86\x89\x70\x97\x11\x1f\x1a\x05\xa5\x0c\x86\x1f\x08\xd6\xd1\xbc\xb5\x8e\x60\x3c\x2e\xe7\xda\x06\xc2\xa6\x2a\xab\x63\x0b\xeb\x11\x65\xf9\x52\x25\x59\xaa\xf2\xa2\xc8\xe3\x24\x55\xb1\x5a\xcc\xb6\xba\xd6\xad\xc6\xae\x39\x1d\xd0\x4b\x37\x39\xe2\x80\xdb\x5e\x37\xfa\xb7\xf9\x60\xdc\x13\xeb\xbf\x76\xf5\x0d\x00\x00\xff\xff\x2f\x24\xab\x3c\x99\x00\x00\x00")

func _2_delete_documents_timestamp_zeroUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__2_delete_documents_timestamp_zeroUpSql,
		"2_delete_documents_timestamp_zero.up.sql",
	)
}

func _2_delete_documents_timestamp_zeroUpSql() (*asset, error) {
	bytes, err := _2_delete_documents_timestamp_zeroUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "2_delete_documents_timestamp_zero.up.sql", size: 153, mode: os.FileMode(420), modTime: time.Unix(1605170866, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __3_add_documents_content_hashUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x48\xc9\x4f\x2e\xcd\x4d\xcd\x2b\x51\x70\x74\x71\x51\x48\xce\xcf\x2b\x49\xcd\x2b\x29\x8e\xcf\x48\x2c\xce\x50\x70\xf6\x70\x0c\xd2\x30\x31\xd0\xb4\x06\x04\x00\x00\xff\xff\xd6\x4e\xe5\xbb\x30\x00\x00\x00")

func _3_add_documents_content_hashUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__3_add_documents_content_hashUpSql,
		"3_add_documents_content_hash.up.sql",
	)
}

func _3_add_documents_content_hashUpSql() (*asset, error) {
	bytes, err := _3_add_documents_content_hashUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "3_add_documents_content_hash.up.sql", size: 48, mode: os.FileMode(420), modTime: time.Unix(1605262256, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x5b\x6f\xdb\xca\x11\x7e\x16\x7f\xc5\x1e\x01\x27\x90\x0a\x57\xe6\xfd\x22\xc0\x40\x71\x92\x14\xc8\x43\x73\x80\x26\xe7\xa9\x53\x08\x4b\x72\xd7\x26\x2a\x89\x0a\x49\x9d\x8c\x1d\xf8\xbf\x17\xdf\xce\xca\x96\x73\xb1\x83\xa2\x0f\x94\xc8\xe1\xec\xcc\x37\xb7\x6f\x78\x79\xa9\x5e\xf7\xad\x51\xd7\x66\x6f\x06\x3d\x99\x56\xd9\x7e\x50\x07\xdd\xfc\x47\x5f\x1b\xb5\xeb\xae\x07\x3d\x75\xfd\x7e\x54\xf5\xad\xba\xee\xff\x5a\x77\xfb\x56\x4f\x5a\xbd\xf9\x5d\xbd\xff\xfd\xa3\x7a\xfb\xe6\xdd\xc7\x95\x5a\xfc\xed\xe1\xf4\x32\xb8\xbc\x54\x63\x7f\x1c\x1a\x33\xae\x71\x1f\x6d\x9a\xc1\xe8\xc9\x6c\x26\x5d\x6f\xcd\xa6\xed\x9b\xe3\xce\xec\xa7\x55\xdb\x7f\xde\xaf\xc6\x4f\xdb\xe7\x74\x8e\x87\x93\x46\xbc\x69\xcd\xd6\x4c\x8f\xef\xc6\xcd\xd4\xed\xcc\x38\xe9\xdd\x61\x73\x67\x86\xfe\x4c\x37\xd9\xe8\xb6\x3d\x53\x6c\xfa\xfd\x64\xf6\xd3\xe6\x46\x8f\x37\x67\x6a\x3e\x92\xd5\x75\x1f\x7c\x1b\x6d\x10\x74\xbb\x43\x3f\x4c\x6a\x11\xcc\xe6\xf5\xed\x64\xc6\x79\x30\x9b\x37\xfd\xee\x30\x98\x71\xbc\xbc\xbe\xeb\x0e\x10\xd8\xdd\x84\xbf\xae\x97\xdf\xcb\xae\x3f\x4e\xdd\x16\x0f\xbd\x3b\x70\xd0\xd3\xcd\xa5\xed\xb6\x06\x37\x10\x8c\xd3\xd0\xed\xaf\xdd\x3b\xe0\x9f\x07\xcb\x20\xb0\xc7\x7d\x73\x42\xf3\x4f\xa3\xdb\x85\x4b\xf0\xbf\xfe\x0d\xb7\x17\x6a\xaf\x77\x46\xc9\xb1\xa5\x5a\x9c\xa4\x66\x18\xfa\x61\xa9\xbe\x04\xb3\xeb\x3b\xf7\xa4\xd6\x57\x0a\xa8\x56\xef\xcd\x67\x18\x31\xc3\xc2\xc1\xc6\xf3\x6f\x47\x6b\xcd\xe0\xcc\x2e\x97\xc1\xac\xb3\xee\xc0\x2f\x57\x6a\xdf\x6d\x61\x62\x36\x98\xe9\x38\xec\xf1\x78\xa1\xec\x6e\x5a\xbd\x85\x75\xbb\x98\xc3\x90\xfa\xf5\xd3\x5a\xfd\xfa\xe7\x5c\x90\x38\x5f\xcb\x60\x76\x1f\x04\xb3\x3f\xf5\xa0\xea\xa3\x55\xe2\x47\x9c\x04\xb3\x8d\xc0\xb9\x52\x5d\xbf\x7a\xdd\x1f\x6e\x17\xaf\xea\xa3\xbd\x50\xd7\x77\xcb\x60\xd6\x6c\xdf\x9e\x90\xae\x5e\x6f\xfb\xd1\x2c\x96\xc1\xff\x0b\x0f\xcc\x88\xfd\x1f\x18\x32\xc3\x20\xb8\xbd\xb0\x3e\xda\xd5\x6f\x80\xbe\x58\x5e\x40\x23\xb8\x0f\x82\xe9\xf6\x60\x94\x1e\x47\x33\x21\xe5\xc7\x66\x82\x15\x17\x9f\xaf\x47\x30\xeb\xf6\xb6\x57\xaa\x1f\x57\x7f\xef\xb6\xe6\xdd\xde\xf6\x0f\xe7\x7c\x09\x4f\xf2\x33\x0b\xae\x86\x4a\xf9\x32\x06\xb3\xb1\xbb\x73\xcf\xdd\x7e\xca\xd3\x60\xb6\xc3\xfc\xa9\x07\xa3\xff\xe8\x5b\xe3\x84\x1f\xbb\x9d\x51\x68\x93\x15\xee\xe0\xe7\xf2\x52\xbd\x87\x2d\x1f\x02\x3a\xcb\xa5\x41\x7a\x68\x61\xbb\xaf\x41\x2c\x9d\xfe\x62\xe9\x5d\x03\xcc\xc3\xd9\x95\x3b\x29\x56\x3f\x00\xd1\xb9\x55\x40\x7c\xc6\x2a\xf4\x17\x4b\x09\xe0\xa9\x51\x77\x50\x8c\x22\x90\x27\x46\x11\xe8\x33\x46\xa1\xbf\x58\x9e\xa7\xe1\xa9\x69\x77\xfc\xc7\xa6\x3b\x7b\xeb\xb2\xf5\xbc\x07\xa4\x72\xb1\x7c\x4c\xeb\x37\x2e\xce\x72\xfd\x6e\x7c\xd3\x0d\x4f\xdc\x7c\xbe\x31\xd3\x8d\x19\x94\x56\x6d\x37\x98\x66\xea\x87\xdb\x67\xdc\xb9\xf3\x8b\xa5\xaa\xfb\x7e\xfb\x6d\x28\xaf\xfa\x71\x85\x38\xe0\xe3\x97\x2b\x15\x9e\x4a\x71\x3b\x3e\x71\xd9\x8d\x6a\xbc\x1d\x5f\xca\xdd\x87\xdb\x51\xea\x61\x06\xab\x1b\xf3\xe5\xfe\xcc\x9f\x6f\x6e\xcc\xeb\x66\xf3\x03\xae\x7d\xd3\x7f\xde\x7f\xf8\xb4\x55\x57\xbe\xd1\x17\x73\xe2\xc8\x12\x97\x35\x71\x58\x12\x87\xe1\xf7\x2f\x6b\x89\x8b\x98\x38\xac\x88\x2d\xfe\x2d\x71\x16\xfa\x33\x5e\x56\xa4\xc4\x45\x21\x57\xd8\x12\x67\x31\x71\x5c\x12\xc7\x2d\x71\x5a\x12\xa7\x15\x71\xdc\xc8\x7f\xd9\x12\xc7\x96\x38\x36\x8f\xf2\x18\x72\x3c\x5b\xe2\xc6\x10\x37\x78\x5f\xcb\xfb\xa6\x95\xfb\x93\x4e\xec\x75\x34\xec\x69\xe2\x3a\x23\x36\x39\x71\xe9\x7d\x3a\x2c\xa9\xc7\x15\x11\x67\x99\xc4\xd1\xc0\x5e\x42\x9c\x66\xc4\x49\x43\x6c\x81\xb3\x91\x2b\x4e\x88\xa3\x54\xe4\x6d\x2b\xf7\x27\x39\x64\x65\x22\x67\xe1\x23\xc2\xf9\x98\x38\x4b\x88\x63\x4d\x9c\x86\xc4\x89\x96\x3c\x26\x89\xfc\xa7\xb5\xe4\xc0\x26\xc4\x55\x2c\xf8\x4d\x22\xef\xa3\xf8\x51\xd7\x86\x8f\x79\x6a\x10\x2b\x62\x6a\xe5\xf9\x94\x1f\xc8\x5c\x1e\x43\xe2\x2c\x97\xbc\xd7\x11\x71\x9c\xc9\x95\x58\xe2\xba\x22\x4e\x80\xbf\x20\x4e\x32\x62\x8d\x1c\xa5\xc4\x91\x26\x8e\xbe\xaa\xa5\xbb\x12\x62\xd3\x12\x57\x95\xe4\x4e\x27\xe7\x35\x9f\x9f\x56\xd6\x0b\xad\xe4\xb9\xf5\x7b\x3b\xeb\xc4\xc0\x67\x3b\x2f\x98\xcd\x5e\xea\xcd\x8b\x60\x36\x9b\xbf\xf4\x39\x31\xbf\x08\x66\x4b\x74\xfb\xcf\x40\x04\xba\xbf\x38\xba\x3f\x47\xe7\xf8\xfe\x61\xa9\xfe\x5c\x94\x2f\x6d\xb1\x87\xe5\xe3\xd6\xc7\xfa\xea\xeb\x01\xfe\x02\x2e\x5e\xab\x9f\x08\xcf\x31\xf3\x5a\x45\x79\x72\xe1\x38\x61\x7d\xce\x97\x8b\x34\x0e\x97\x4e\x0e\x16\x5b\x0b\xcb\xfd\xb1\xef\x78\x11\x65\x55\x19\x57\x59\x98\x57\x17\x2a\x5c\xde\x07\x33\x0d\x14\xaf\x5c\xf0\x5f\x5c\xc4\x6b\xe5\x03\x07\xc4\xb5\xfb\xbd\x7f\x28\x95\xbe\xf8\x29\x16\xf9\xe3\xf0\xbf\x72\x48\xde\x10\x57\x11\x71\x1a\x11\xe7\x96\xb8\xc2\x0c\x84\xc4\x51\x43\xdc\x60\x86\xd1\x97\x46\x66\x0f\xef\x75\x21\xf3\xd6\xe6\xc4\x69\x23\xbd\x5a\xa7\xc4\x6d\xe2\xf9\x07\x36\x42\xe2\xba\x7c\xec\x75\xcc\x54\x95\xc9\xdc\xb7\x9a\xd8\x66\xc4\x65\x2a\xfa\x35\xce\xe4\xc4\x99\x26\xce\x63\xe9\x79\xe8\x00\x17\x38\x26\x31\xc2\x09\x79\x4a\x1c\xc6\x32\x7b\xb8\xaa\x42\x66\x3f\x4e\x89\x0d\x70\x58\xe2\xd6\x3e\xce\x52\x6b\x88\xb3\x5a\xb8\x10\x18\x30\xfb\x21\xe6\x0e\xdc\x56\xc8\x3f\x38\x27\x6f\x89\x8b\x5c\x7c\xb8\x1c\x40\x5e\x88\x2f\x77\x85\x32\xfb\x79\x46\x1c\xd5\xc4\xb5\xe7\x28\x0d\x6c\xb9\xcc\xbc\x9b\x7d\xe3\xb9\xd4\x73\x13\x64\x36\x27\x4e\xc0\x5b\xb9\x70\xa7\x05\xe7\xe6\x82\x15\xb9\x0c\x0b\xe1\xc4\xbc\x90\x1c\xe6\xde\x2e\x38\xac\xd0\xc2\xdb\xb0\x59\x16\xa2\x13\x79\x79\xad\x05\x73\x83\x1c\x18\xc9\x53\x85\x5c\x1b\xe2\x1c\xfe\x23\xe1\x17\xf8\x41\x9e\xc0\xb1\x78\x06\x2e\x3c\x9b\x90\xb8\xad\xc5\x36\x62\x6a\x2b\xc1\xaa\x43\xe1\x6f\x8d\x5c\x19\xe1\x5c\xd4\x30\xce\x45\x17\x39\x00\xff\x82\xef\xd1\x5f\x45\x22\x38\x4e\xf8\x33\x5f\x3b\xd8\xab\x13\xe2\xdc\x08\xcf\x9a\x4c\xea\x80\x0b\xdc\x9d\xc6\x92\x93\xb0\x16\x4c\xd8\x21\x59\xe9\xf9\x2f\x26\xce\xd1\x9b\xa9\xd4\x07\x32\x60\x43\xfd\x1b\x2d\xb5\xac\x7d\x5f\x69\xd4\x38\x12\xae\x84\x8f\xb2\x94\xdd\xe3\x7a\x28\x93\x1d\x84\x7c\x95\xbe\xce\xe8\xd7\xda\x0a\x0f\xe7\x11\x71\x52\x13\x6b\xbc\xd3\xe2\x2f\xf2\xbb\x07\xbd\x6c\xb4\xef\xa9\x5c\x7a\x07\x7b\xa0\x40\xfe\xd0\x2f\x56\x6c\x66\xa9\xbc\xb7\x95\xd4\xdd\xd6\xc4\x65\x44\x5c\x36\xd2\x17\xa8\x03\xfa\x42\xe7\xb2\x0f\xda\x50\xf4\xe1\x1f\x78\x0b\xec\x91\xd8\xdb\x36\x8f\x3b\x16\xd8\xe2\x58\x66\xa8\xd2\x52\x57\xf4\x0d\x66\x11\x98\x10\x03\x6a\x8a\x1e\x42\x6d\x8a\x90\xb8\x68\x89\x4d\x2d\x7b\x1e\x76\x4a\x2d\x35\x40\x8e\xf0\x9d\xe0\xea\xd4\xf8\xfd\x52\xc8\x6e\xac\x8c\xec\x3f\x37\x5f\xf8\x7e\x28\x7c\x7e\x6a\xb1\xe7\xf2\x94\x8b\xcd\xea\xb4\xab\xb5\xec\x50\xcc\x2d\x76\x1b\xf2\x87\x39\x81\x3e\xce\x67\xbe\x27\x31\xef\xd8\xcf\xc0\x96\x54\xc2\x25\x2e\xb7\xda\xf7\x9a\x95\xd8\x5d\x6d\x23\xc1\x85\x3c\xd8\xc6\xf3\x4d\x2c\x73\x0c\x3e\x72\xb5\xab\xa4\x6f\xd0\x63\x4d\x2e\x33\x81\x79\x75\xdf\x02\x25\x71\x5e\xfa\xfe\x0d\x25\xde\xaa\x91\x7a\x41\x2f\xf3\xbe\x1b\xec\x74\x70\x5b\x29\x3e\xf0\x5d\x83\x59\x07\x2f\x85\x91\xd8\xc5\xee\xc6\xbc\xeb\xca\xcf\x30\x66\x29\x12\x8e\x01\xa7\x60\x97\x83\x1b\xd1\x8f\x98\x39\xf0\x21\xfc\x61\x36\x81\x01\xdc\x66\x0a\xe9\x21\xe4\x07\xdf\x11\xb5\xe7\x52\x7c\x9f\x60\x9e\xd0\xe3\xe5\x7f\x03\x00\x00\xff\xff\x4a\x60\x2c\xfe\x00\x10\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 12288, mode: os.FileMode(420), modTime: time.Unix(1605262515, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"1_create_table_document.down.sql":         _1_create_table_documentDownSql,
	"1_create_table_document.up.sql":           _1_create_table_documentUpSql,
	"2_delete_documents_timestamp_zero.up.sql": _2_delete_documents_timestamp_zeroUpSql,
	"3_add_documents_content_hash.up.sql":      _3_add_documents_content_hashUpSql,
	"bindata.go":                               bindataGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"1_create_table_document.down.sql":         &bintree{_1_create_table_documentDownSql, map[string]*bintree{}},
	"1_create_table_document.up.sql":           &bintree{_1_create_table_documentUpSql, map[string]*bintree{}},
	"2_delete_documents_timestamp_zero.up.sql": &bintree{_2_delete_documents_timestamp_zeroUpSql, map[string]*bintree{}},
	"3_add_documents_content_hash.up.sql":      &bintree{_3_add_documents_content_hashUpSql, map[string]*bintree{}},
	"bindata.go":                               &bintree{bindataGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
