// Code generated for package migrations by go-bindata DO NOT EDIT. (@generated)
// sources:
// 1_create_table_document.down.sql
// 1_create_table_document.up.sql
// 2_delete_documents_timestamp_zero.up.sql
// 3_add_documents_contents_hash.up.sql
// bindata.go
package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __1_create_table_documentDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x09\xf2\x74\x77\x77\x0d\x52\x28\x2d\x48\x49\x2c\x49\x8d\x2f\x2e\x49\x2c\x29\x8e\x4f\xce\xcf\x2b\x49\xcd\x2b\x29\x8e\x2f\xce\xac\x4a\xb5\xe6\x82\x28\x74\x74\xf2\x71\x55\x00\xcb\x43\x45\x3c\xfd\x5c\x5c\x23\x14\x3c\xdd\x14\x5c\x23\x3c\x83\x43\x82\x15\x32\x53\x2a\x40\x3a\x8b\x33\x8b\x4b\x52\xf3\x92\x2b\xe3\x33\x12\x8b\x33\xf0\x28\x2d\xc9\xcc\x4d\x2d\x2e\x49\xcc\x2d\x40\x56\x08\xb1\x25\x25\x3f\xb9\x34\x37\x35\xaf\xc4\x1a\x10\x00\x00\xff\xff\xf3\xed\x99\xe6\xa3\x00\x00\x00")

func _1_create_table_documentDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_create_table_documentDownSql,
		"1_create_table_document.down.sql",
	)
}

func _1_create_table_documentDownSql() (*asset, error) {
	bytes, err := _1_create_table_documentDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_create_table_document.down.sql", size: 163, mode: os.FileMode(420), modTime: time.Unix(1598295069, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1_create_table_documentUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\x41\x6f\x9b\x30\x1c\xc5\xef\xfe\x14\x6f\xa7\x82\xd6\x4c\x99\xb4\xd3\x50\x0f\x90\xb8\xc4\x1a\x33\x95\x71\xda\xf5\x84\x50\xb0\x06\x5a\x62\xa3\xda\x6c\xcd\x3e\xfd\x64\x02\x49\x49\x97\x43\x24\xec\x9f\xdf\xff\xff\xde\x5b\x09\x1a\x4b\x0a\x19\x27\x19\x45\x6d\x76\xfd\x41\x69\x47\x02\x02\x00\x4d\x65\x1b\xbc\xfd\xad\x36\xb1\x08\xbe\x2c\x43\x3c\x08\xf6\x3d\x16\xcf\xf8\x46\x9f\x6f\x07\x74\x67\xb4\x6d\xad\x53\x7a\x77\x2c\x87\x67\x13\x7a\xba\x76\xc7\x4e\xcd\x94\x1e\x63\x31\x10\x9f\x97\xcb\x10\x3c\x97\xe0\xdb\x2c\x1b\xd9\xf6\xa0\xac\xab\x0e\xdd\xc4\x26\x2c\x65\x5c\x8e\x1f\x73\x76\x67\xb4\x53\xda\xd9\xb3\x6e\x92\xe5\x09\x09\x23\x42\x16\x0b\x3c\x29\x58\xf3\xe2\x60\xf4\x45\xf3\xf6\x64\xca\x1a\xb4\x1a\xae\x51\xe6\xe5\x88\x4a\xa3\xd5\xb5\x7a\x85\x6d\x4c\xbf\xaf\x61\x3b\xa5\x6a\xf4\x1d\x5c\xd3\xea\x9f\xd6\x4b\xc9\x7c\x9d\x7f\x85\x54\xd6\xf9\x43\xfb\x81\x8c\xb1\x31\xbe\xa6\x3f\xd0\xd6\xaf\xe5\x79\xc2\xc9\x7e\xce\xcf\x61\x22\xb8\x9a\x1e\x46\xef\x9f\xbf\xcb\x6f\x26\x70\x7d\xeb\x0d\xce\x8a\xb3\xae\x72\x76\x6c\xed\x97\x3a\x9e\xe3\xfd\x6f\x57\xbf\xab\x7d\xaf\x66\x0d\x90\xcb\x4a\x52\xb0\x34\xa5\x02\x7d\x57\x57\x4e\x95\x83\x70\x39\xc5\x5c\xda\xf6\xaf\xc2\xf6\x61\xed\xc9\xfc\xfe\x12\xff\x9b\x6d\x49\x42\x53\xc6\x87\x41\x23\x38\x68\xa0\xa0\x72\x9c\x7c\x87\x55\x5c\xc8\x20\x18\xfe\x4f\x47\x71\x01\xc6\x25\x4d\xa9\x08\xf1\x11\xec\xde\x37\x1c\x64\x94\xa7\x72\x13\x68\xf5\xe7\xd3\x34\x28\xbc\xc5\x32\xc4\xe2\x8a\x30\xfb\x7a\x4e\x84\x5e\x70\x34\x18\xe2\x69\x43\x05\x1d\x62\xb9\xc3\xcd\xc4\x2d\xbc\x95\x9b\x88\x50\xbe\x8e\x08\xe3\x05\x15\xd2\xaf\x90\x8f\xdb\x3e\xc6\xd9\x96\x16\x08\xae\x78\x2f\x1e\xfd\x0b\x00\x00\xff\xff\x39\xbf\x75\x3f\x33\x03\x00\x00")

func _1_create_table_documentUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_create_table_documentUpSql,
		"1_create_table_document.up.sql",
	)
}

func _1_create_table_documentUpSql() (*asset, error) {
	bytes, err := _1_create_table_documentUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_create_table_document.up.sql", size: 819, mode: os.FileMode(420), modTime: time.Unix(1598295069, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __2_delete_documents_timestamp_zeroUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcc\x41\x0a\x82\x40\x14\x06\xe0\x7d\xa7\xf8\x2f\x60\x60\x3a\x6a\x44\x9b\x68\x32\xc1\x8a\xcc\x68\x3d\xe8\x2b\x06\x9c\xf7\xc2\x19\x23\x3a\x7d\xd0\xba\x03\x7c\x5f\x14\xe1\xca\xf6\x0d\x36\x2c\x9e\x3a\xe1\xde\xe3\x65\x86\x89\x70\x97\x11\x1f\x1a\x05\xa5\x0c\x86\x1f\x08\xd6\xd1\xbc\xb5\x8e\x60\x3c\x2e\xe7\xda\x06\xc2\xa6\x2a\xab\x63\x0b\xeb\x11\x65\xf9\x52\x25\x59\xaa\xf2\xa2\xc8\xe3\x24\x55\xb1\x5a\xcc\xb6\xba\xd6\xad\xc6\xae\x39\x1d\xd0\x4b\x37\x39\xe2\x80\xdb\x5e\x37\xfa\xb7\xf9\x60\xdc\x13\xeb\xbf\x76\xf5\x0d\x00\x00\xff\xff\x2f\x24\xab\x3c\x99\x00\x00\x00")

func _2_delete_documents_timestamp_zeroUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__2_delete_documents_timestamp_zeroUpSql,
		"2_delete_documents_timestamp_zero.up.sql",
	)
}

func _2_delete_documents_timestamp_zeroUpSql() (*asset, error) {
	bytes, err := _2_delete_documents_timestamp_zeroUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "2_delete_documents_timestamp_zero.up.sql", size: 153, mode: os.FileMode(420), modTime: time.Unix(1605170866, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __3_add_documents_contents_hashUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x48\xc9\x4f\x2e\xcd\x4d\xcd\x2b\x51\x70\x74\x71\x51\x48\xce\xcf\x2b\x49\xcd\x2b\x29\x8e\xcf\x48\x2c\xce\x50\x70\xf6\x70\x0c\xd2\x30\x31\xd0\xb4\x06\x04\x00\x00\xff\xff\xd6\x4e\xe5\xbb\x30\x00\x00\x00")

func _3_add_documents_contents_hashUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__3_add_documents_contents_hashUpSql,
		"3_add_documents_contents_hash.up.sql",
	)
}

func _3_add_documents_contents_hashUpSql() (*asset, error) {
	bytes, err := _3_add_documents_contents_hashUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "3_add_documents_contents_hash.up.sql", size: 48, mode: os.FileMode(420), modTime: time.Unix(1605810460, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x5b\x6f\xdb\xca\x11\x7e\x16\x7f\xc5\x1e\x01\x27\x90\x0a\x57\xe6\xfd\x22\xc0\x40\x71\x92\x14\xc8\x43\x73\x80\x26\xe7\xa9\x53\x08\x4b\x72\xd7\x26\x2a\x89\x0a\x49\x9d\x8c\x1d\xf8\xbf\x17\xdf\xce\xca\x96\x73\xb1\x83\xa2\x0f\x94\xc8\xe1\xec\xcc\x37\xb7\x6f\x78\x79\xa9\x5e\xf7\xad\x51\xd7\x66\x6f\x06\x3d\x99\x56\xd9\x7e\x50\x07\xdd\xfc\x47\x5f\x1b\xb5\xeb\xae\x07\x3d\x75\xfd\x7e\x54\xf5\xad\xba\xee\xff\x5a\x77\xfb\x56\x4f\x5a\xbd\xf9\x5d\xbd\xff\xfd\xa3\x7a\xfb\xe6\xdd\xc7\x95\x5a\xfc\xed\xe1\xf4\x32\xb8\xbc\x54\x63\x7f\x1c\x1a\x33\xae\x71\x1f\x6d\x9a\xc1\xe8\xc9\x6c\x26\x5d\x6f\xcd\xa6\xed\x9b\xe3\xce\xec\xa7\x55\xdb\x7f\xde\xaf\xc6\x4f\xdb\xe7\x74\x8e\x87\x93\x46\xbc\x69\xcd\xd6\x4c\x8f\xef\xc6\xcd\xd4\xed\xcc\x38\xe9\xdd\x61\x73\x67\x86\xfe\x4c\x37\xd9\xe8\xb6\x3d\x53\x6c\xfa\xfd\xe4\x6e\x6e\xf4\x78\x73\xa6\xe7\x43\x59\x5d\xf7\xc1\xb7\xe1\x06\x41\xb7\x3b\xf4\xc3\xa4\x16\xc1\x6c\x5e\xdf\x4e\x66\x9c\x07\xb3\x79\xd3\xef\x0e\x83\x19\xc7\xcb\xeb\xbb\xee\x00\x81\xdd\x4d\xf8\xeb\x7a\xf9\xbd\xec\xfa\xe3\xd4\x6d\xf1\xd0\xbb\x03\x07\x3d\xdd\x5c\xda\x6e\x6b\x70\x03\xc1\x38\x0d\xdd\xfe\xda\xbd\x43\x00\xf3\x60\x19\x04\xf6\xb8\x6f\x4e\x68\xfe\x69\x74\xbb\x70\x19\xfe\xd7\xbf\xe1\xf6\x42\xed\xf5\xce\x28\x39\xb6\x54\x8b\x93\xd4\x0c\x43\x3f\x2c\xd5\x97\x60\x76\x7d\xe7\x9e\xd4\xfa\x4a\x01\xd5\xea\xbd\xf9\x0c\x23\x66\x58\x38\xd8\x78\xfe\xed\x68\xad\x19\x9c\xd9\xe5\x32\x98\x75\xd6\x1d\xf8\xe5\x4a\xed\xbb\x2d\x4c\xcc\x06\x33\x1d\x87\x3d\x1e\x2f\x94\xdd\x4d\xab\xb7\xb0\x6e\x17\x73\x18\x52\xbf\x7e\x5a\xab\x5f\xff\x9c\x0b\x12\xe7\x6b\x19\xcc\xee\x83\x60\xf6\xa7\x1e\x54\x7d\xb4\x4a\xfc\x88\x93\x60\xb6\x11\x38\x57\xaa\xeb\x57\xaf\xfb\xc3\xed\xe2\x55\x7d\xb4\x17\xea\xfa\x6e\x19\xcc\x9a\xed\xdb\x13\xd2\xd5\xeb\x6d\x3f\x9a\xc5\x32\xf8\x7f\xe1\x81\x19\xb1\xff\x03\x43\x66\x18\x04\xb7\x17\xd6\x47\xbb\xfa\x0d\xd0\x17\xcb\x0b\x68\x04\xf7\x41\x30\xdd\x1e\x8c\xd2\xe3\x68\x26\xa4\xfc\xd8\x4c\xb0\xe2\xe2\xf3\xf5\x08\x66\xdd\xde\xf6\x4a\xf5\xe3\xea\xef\xdd\xd6\xbc\xdb\xdb\xfe\xe1\x9c\x2f\xe1\x49\x7e\x66\xc1\xd5\x50\x29\x5f\xc6\x60\x36\x76\x77\xee\xb9\xdb\x4f\x79\x1a\xcc\x76\x18\x40\xf5\x60\xf4\x1f\x7d\x6b\x9c\xf0\x63\xb7\x33\x0a\x6d\xb2\xc2\x1d\xfc\x5c\x5e\xaa\xf7\xb0\xe5\x43\x40\x67\xb9\x34\x48\x0f\x2d\x6c\xf7\x35\x88\xa5\xd3\x5f\x2c\xbd\x6b\x80\x79\x38\xbb\x72\x27\xc5\xea\x07\x20\x3a\xb7\x0a\x88\xcf\x58\x85\xfe\x62\x29\x01\x3c\x35\xea\x0e\x8a\x51\x04\xf2\xc4\x28\x02\x7d\xc6\x28\xf4\x17\xcb\xf3\x34\x3c\x35\xed\x8e\xff\xd8\x74\x67\x6f\x5d\xb6\x9e\xf7\x80\x54\x2e\x96\x8f\x69\xfd\xc6\xc5\x59\xae\xdf\x8d\x6f\xba\xe1\x89\x9b\xcf\x37\x66\xba\x31\x83\xd2\xaa\xed\x06\xd3\x4c\xfd\x70\xfb\x8c\x3b\x77\x7e\xb1\x54\x75\xdf\x6f\xbf\x0d\xe5\x55\x3f\xae\x10\x07\x7c\xfc\x72\xa5\xc2\x53\x29\x6e\xc7\x27\x2e\xbb\x51\x8d\xb7\xe3\x4b\xb9\xfb\x70\x3b\x4a\x3d\xcc\x60\x75\x63\xbe\xdc\x9f\xf9\xf3\xcd\x8d\x79\xdd\x6c\x7e\x40\xb6\x6f\xfa\xcf\xfb\x0f\x9f\xb6\xea\xca\x37\xfa\x62\x4e\x1c\x59\xe2\xb2\x26\x0e\x4b\xe2\x30\xfc\xfe\x65\x2d\x71\x11\x13\x87\x15\xb1\xc5\xbf\x25\xce\x42\x7f\xc6\xcb\x8a\x94\xb8\x28\xe4\x0a\x5b\xe2\x2c\x26\x8e\x4b\xe2\xb8\x25\x4e\x4b\xe2\xb4\x22\x8e\x1b\xf9\x2f\x5b\xe2\xd8\x12\xc7\xe6\x51\x1e\x43\x8e\x67\x4b\xdc\x18\xe2\x06\xef\x6b\x79\xdf\xb4\x72\x7f\xd2\x89\xbd\x8e\x86\x3d\x4d\x5c\x67\xc4\x26\x27\x2e\xbd\x4f\x87\x25\xf5\xb8\x22\xe2\x2c\x93\x38\x1a\xd8\x4b\x88\xd3\x8c\x38\x69\x88\x2d\x70\x36\x72\xc5\x09\x71\x94\x8a\xbc\x6d\xe5\xfe\x24\x87\xac\x4c\xe4\x2c\x7c\x44\x38\x1f\x13\x67\x09\x71\xac\x89\xd3\x90\x38\xd1\x92\xc7\x24\x91\xff\xb4\x96\x1c\xd8\x84\xb8\x8a\x05\xbf\x49\xe4\x7d\x14\x3f\xea\xda\xf0\x31\x4f\x0d\x62\x45\x4c\xad\x3c\x9f\xf2\x03\x99\xcb\x63\x48\x9c\xe5\x92\xf7\x3a\x22\x8e\x33\xb9\x12\x4b\x5c\x57\xc4\x09\xf0\x17\xc4\x49\x46\xac\x91\xa3\x94\x38\xd2\xc4\xd1\x57\xb5\x74\x57\x42\x6c\x5a\xe2\xaa\x92\xdc\xe9\xe4\xbc\xe6\xf3\xd3\xca\x7a\xa1\x95\x3c\xb7\x7e\x6f\x67\x9d\x18\xf8\x6c\xe7\x05\xb3\xd9\x4b\xbd\x79\x11\xcc\x66\xf3\x97\xbe\x27\xe6\x17\xc1\x6c\x89\x6e\xff\x19\x88\x40\xf7\x17\x47\xf7\xe7\xe8\x1c\xdf\x3f\x2c\xd5\x9f\x8b\xf2\xa5\x2d\xf6\xb0\x7c\xdc\xfa\x58\x5f\x7d\x3d\xc0\x5f\xc0\xc5\x6b\xf5\x13\xe1\x39\x66\x5e\xab\x28\x4f\x2e\x1c\x27\xac\xcf\xf9\x72\x91\xc6\xe1\xd2\xc9\xc1\x62\x6b\x61\xb9\x3f\xf6\x1d\x2f\xa2\xac\x2a\xe3\x2a\x0b\xf3\xea\x42\x85\xcb\xfb\x60\xa6\x81\xe2\x95\x0b\xfe\x8b\x8b\x78\xad\x7c\xe0\x80\xb8\x76\xbf\xf7\x0f\xa5\xd2\x17\x3f\xc5\x22\x7f\x1c\xfe\x57\x0e\xc9\x1b\xe2\x2a\x22\x4e\x23\xe2\xdc\x12\x57\x98\x81\x90\x38\x6a\x88\x1b\xcc\x30\xfa\xd2\xc8\xec\xe1\xbd\x2e\x64\xde\xda\x9c\x38\x6d\xa4\x57\xeb\x94\xb8\x4d\x3c\xff\xc0\x46\x48\x5c\x97\x8f\xbd\x8e\x99\xaa\x32\x99\xfb\x56\x13\xdb\x8c\xb8\x4c\x45\xbf\xc6\x99\x9c\x38\xd3\xc4\x79\x2c\x3d\x0f\x1d\xe0\x02\xc7\x24\x46\x38\x21\x4f\x89\xc3\x58\x66\x0f\x57\x55\xc8\xec\xc7\x29\xb1\x01\x0e\x4b\xdc\xda\xc7\x59\x6a\x0d\x71\x56\x0b\x17\x02\x03\x66\x3f\xc4\xdc\x81\xdb\x0a\xf9\x07\xe7\xe4\x2d\x71\x91\x8b\x0f\x97\x03\xc8\x0b\xf1\xe5\xae\x50\x66\x3f\xcf\x88\xa3\x9a\xb8\xf6\x1c\xa5\x81\x2d\x97\x99\x77\xb3\x6f\x3c\x97\x7a\x6e\x82\xcc\xe6\xc4\x09\x78\x2b\x17\xee\xb4\xe0\xdc\x5c\xb0\x22\x97\x61\x21\x9c\x98\x17\x92\xc3\xdc\xdb\x05\x87\x15\x5a\x78\x1b\x36\xcb\x42\x74\x22\x2f\xaf\xb5\x60\x6e\x90\x03\x23\x79\xaa\x90\x6b\x43\x9c\xc3\x7f\x24\xfc\x02\x3f\xc8\x13\x38\x16\xcf\xc0\x85\x67\x13\x12\xb7\xb5\xd8\x46\x4c\x6d\x25\x58\x75\x28\xfc\xad\x91\x2b\x23\x9c\x8b\x1a\xc6\xb9\xe8\x22\x07\xe0\x5f\xf0\x3d\xfa\xab\x48\x04\xc7\x09\x7f\xe6\x6b\x07\x7b\x75\x42\x9c\x1b\xe1\x59\x93\x49\x1d\x70\x81\xbb\xd3\x58\x72\x12\xd6\x82\x09\x3b\x24\x2b\x3d\xff\xc5\xc4\x39\x7a\x33\x95\xfa\x40\x06\x6c\xa8\x7f\xa3\xa5\x96\xb5\xef\x2b\x8d\x1a\x47\xc2\x95\xf0\x51\x96\xb2\x7b\x5c\x0f\x65\xb2\x83\x90\xaf\xd2\xd7\x19\xfd\x5a\x5b\xe1\xe1\x3c\x22\x4e\x6a\x62\x8d\x77\x5a\xfc\x45\x7e\xf7\xa0\x97\x8d\xf6\x3d\x95\x4b\xef\x60\x0f\x14\xc8\x1f\xfa\xc5\x8a\xcd\x2c\x95\xf7\xb6\x92\xba\xdb\x9a\xb8\x8c\x88\xcb\x46\xfa\x02\x75\x40\x5f\xe8\x5c\xf6\x41\x1b\x8a\x3e\xfc\x03\x6f\x81\x3d\x12\x7b\xdb\xe6\x71\xc7\x02\x5b\x1c\xcb\x0c\x55\x5a\xea\x8a\xbe\xc1\x2c\x02\x13\x62\x40\x4d\xd1\x43\xa8\x4d\x11\x12\x17\x2d\xb1\xa9\x65\xcf\xc3\x4e\xa9\xa5\x06\xc8\x11\xbe\x13\x5c\x9d\x1a\xbf\x5f\x0a\xd9\x8d\x95\x91\xfd\xe7\xe6\x0b\xdf\x0f\x85\xcf\x4f\x2d\xf6\x5c\x9e\x72\xb1\x59\x9d\x76\xb5\x96\x1d\x8a\xb9\xc5\x6e\x43\xfe\x30\x27\xd0\xc7\xf9\xcc\xf7\x24\xe6\x1d\xfb\x19\xd8\x92\x4a\xb8\xc4\xe5\x56\xfb\x5e\xb3\x12\xbb\xab\x6d\x24\xb8\x90\x07\xdb\x78\xbe\x89\x65\x8e\xc1\x47\xae\x76\x95\xf4\x0d\x7a\xac\xc9\x65\x26\x30\xaf\xee\x5b\xa0\x24\xce\x4b\xdf\xbf\xa1\xc4\x5b\x35\x52\x2f\xe8\x65\xde\x77\x83\x9d\x0e\x6e\x2b\xc5\x07\xbe\x6b\x30\xeb\xe0\xa5\x30\x12\xbb\xd8\xdd\x98\x77\x5d\xf9\x19\xc6\x2c\x45\xc2\x31\xe0\x14\xec\x72\x70\x23\xfa\x11\x33\x07\x3e\x84\x3f\xcc\x26\x30\x80\xdb\x4c\x21\x3d\x84\xfc\xe0\x3b\xa2\xf6\x5c\x8a\xef\x13\xcc\x13\x7a\xfc\xbf\x01\x00\x00\xff\xff\x44\x7a\x61\xa1\x00\x10\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 12288, mode: os.FileMode(420), modTime: time.Unix(1606808339, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"1_create_table_document.down.sql":         _1_create_table_documentDownSql,
	"1_create_table_document.up.sql":           _1_create_table_documentUpSql,
	"2_delete_documents_timestamp_zero.up.sql": _2_delete_documents_timestamp_zeroUpSql,
	"3_add_documents_contents_hash.up.sql":     _3_add_documents_contents_hashUpSql,
	"bindata.go":                               bindataGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"1_create_table_document.down.sql":         &bintree{_1_create_table_documentDownSql, map[string]*bintree{}},
	"1_create_table_document.up.sql":           &bintree{_1_create_table_documentUpSql, map[string]*bintree{}},
	"2_delete_documents_timestamp_zero.up.sql": &bintree{_2_delete_documents_timestamp_zeroUpSql, map[string]*bintree{}},
	"3_add_documents_contents_hash.up.sql":     &bintree{_3_add_documents_contents_hashUpSql, map[string]*bintree{}},
	"bindata.go":                               &bintree{bindataGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
